// test.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <stdio.h>
#include <iostream>
#include <string>
#include <map>
#include <algorithm> 
#include <sstream>
#include <vector>

using namespace std;

//字符串分类
int mainx()
{
	int n;
	
	cin >> n;

	map<string,size_t> map_;

	for (int i = 0; i < n; i++)
	{
		string code;
		cin >> code;
		sort(code.begin(), code.end());//note
		map_[code]++;
	}

	cout << map_.size();

    return 0;
}

//平衡数
int main0()
{
	unsigned int n;
	cin >> n;
	std::vector<int> chars;
	
	do 
	{
		int tmp =  n % 10;
		chars.push_back(tmp);
		n /= 10;
	} while (n);


	for (int i = 0; i < chars.size(); i++)
	{
		unsigned int left = 1, right = 1;

		for (int j = 0; j < i; j++)
		{
			left *= chars[j];
		}
		
		for (int k = i; k < chars.size(); k++)
		{
			right *= chars[k];
		}

		if (left == right)
		{
			cout << "YES";
			return 0;
		}
	}

	cout << "NO";
	return 0;
}

//最小的矩形
int main1()
{
	int point_num;

	struct Point
	{
		int x;
		int y;
	};

	cin >> point_num;

	vector<Point> points;

	for (int i = 0; i < point_num; i++)
	{
		int x, y;
		cin >> x >> y;
		points.push_back(Point{ x,y });
	}

	int xMax = -65536;
	int xMin = 65536;
	for (int i = 0; i < point_num; i++) {
		if (points[i].x > xMax) {
			xMax = points[i].x;
		}
		if (points[i].x < xMin) {
			xMin = points[i].x;
		}
	}

	int xLen = xMax - xMin;

	int yMax = -65536;
	int yMin = 65536;
	for (int i = 0; i < point_num; i++) {
		if (points[i].y > yMax) {
			yMax = points[i].y;
		}
		if (points[i].y < yMin) {
			yMin = points[i].y;
		}
	}

	int yLen = yMax - yMin;

	cout << xLen * yLen;

	return 0;
}

//添加字符
int main2()
{
	std::string A, B;

	cin >> A >> B;

	int len_A = A.length();
	int len_B = B.length();

	int max_len = 0;

	for (int i = 0; i < len_B - len_A; i++)
	{
		int len = 0;

		for (int j = 0; j < len_A; j++)
		{
			if (A[j] == B[j + i])
			{
				len++;
			}
		}

		max_len = max(len, max_len);
	}

	cout << len_A - max_len;
	return 0;
}

bool is_prime(unsigned int num)
{
	if (num == 1) return false;

	unsigned int sqrt_num = sqrt(num);

	for (unsigned int i = 2; i < sqrt_num; i++)
	{
		if (num %  i == 0) return false;
	}

	return true;
}

bool check_num(unsigned int num)
{
	std::vector<int> nums;
	do
	{
		nums.push_back(num % 10);
		num /= 10;
	} while (num);

	for (int i = 0; i < nums.size(); i++)
	{
		for (int j = 0; j < nums.size(); j++)
		{
			if(i == j) continue;

			if ((nums[i] != 0) && is_prime(nums[i] * 10 + nums[j]))
			{
				return true;
			}
		}
	}
	return false;
}
//神奇数
int main3()
{
	unsigned int start_num, end_num;
	cin >> start_num >> end_num;
	
	unsigned int num = 0;
	for (unsigned int i = start_num; i <= end_num; i++)
	{
		if (check_num(i)) num++;
	}

	cout << num;

	return 0;
}

unsigned int fun(unsigned int num)
{
	int result = 1;
	
	vector<int> nums;
	do 
	{
		nums.push_back(num % 10);
		num /= 10;
	} while (num);

	for (int i = 0; i < nums.size(); i++)
	{
		result *= nums[i];
	}
	return result;
}
//变化次数
int main4()
{
	int num;
	cin >> num;

	int count = 0;
	while (num / 10)
	{
		num = fun(num);
		count++;
	}

	cout << count;
	return 0;
}

//组装三角形
int main5()
{
	int n;
	cin >> n;

	vector<int > a(n);
	for (int i = 0; i < n; i++)
		cin >> a[i];

	unsigned int count = 0;
	for (int i = 0; i < n - 2; i++)
	{
		for (int j = i + 1; j < n - 1; j++)
		{
			for (int k = j + 1; k < n; k++)
			{
				if (a[i] + a[j] > a[k] && a[i] + a[k] > a[j] && a[j] + a[k] > a[i])
					count++;
			}
		}
	}
	cout << count;

	return 0;
}

//找整除
int main6()
{
	int a, b, c;

	cin >> a >> b >> c;

	int count = b / c - a / c;
	if (b - a >= b) count++;
	cout << count;
	return 0;
}

//回文串
int main()
{
	return 0;
}
