一、extern "C"
1. extern "C"的真实目的是实现类C和C++的混合编程。extern “C”是由Ｃ＋＋提供的一个连接交换指定符号，用于告诉Ｃ＋＋这段代码是Ｃ函数。使得c++中使用c语言成为可能
   extern “C”后面的函数不使用的C++的名字修饰,而是用C。这是因为C++编译后库中函数名会变得很长，与C生成的不一致，造成Ｃ＋＋不能直接调用C函数。
   
2.C++语言支持函数重载，C语言不支持函数重载。函数被C++编译后在库中的名字与C语言的不同。假设某个函数的原型为：void foo(int x, int y);该函数被
   C编译器编译后在库中的名字为_foo， 而C++编译器则会产生像_foo_int_int之类的名字。C++提供了C连接交换指定符号extern“C”来解决名字匹配问题。
   被extern "C"限定的函数或变量是extern类型的；extern是C/C++语言中表明函数和全局变量作用范围（可见性）的关键字，该关键字告诉编译器，其声明
   的函数和变量可以在本模块或其它模块中使用。被extern "C"修饰的变量和函数是按照C语言方式编译和连接的。  
   
二、extern“C”与__cplusplus   
#ifdef __cplusplus
       extern "C" {
       #endif
       #ifdef __cplusplus
       }
       #endif
    Cplusplus（C plus plus）即"C++"，用于C++文档的头文件中，上面代码的意思是：如果是C++文件（*.cpp）后缀，则使用extern “C”，
    在C++项目中应用的非常广泛。即使用gcc编译器编译，函数名为C类型如_foo。
    
三、C调用C++函数（接口）

1.设计程序，共四个文件
  animal.cpp animal.h  main.c Makefile
1.1 animal.h

[root@localhost CC++]#cat animal.h
#ifndef __ANIMAL_H__  //防止被重复包含
#define __ANIMAL_H__
#ifdef __cplusplus
extern "C" {
#endif
class ANIMAL{
public:
        ANIMAL(char* );
        ~ANIMAL();
        char* getname(void);
private:
        char* name;
};
void print(void);
#ifdef __cplusplus
}
#endif
#endif  // __ANIMAL_H__

1.2 animal.cpp：C++文件

[root@localhost CC++]#cat animal.cpp
#include "animal.h"
#include <iostream>
using namespace std;
ANIMAL::ANIMAL(char* data)//构造函数
{       name = new char[64];
        strcpy(name, data);
}
ANIMAL::~ANIMAL() //析构函数

{
        if(name)
        {
            delete[] name; name = NULL;
        }
}
char* ANIMAL::getname(void)
{        return name;
}
void print(void) //对外接口，而且必须有一个非类中方法，才能被C调用
{
        ANIMAL animal("dog");
        char* animal_name = animal.getname();
        cout << "animal name is :" << animal_name << endl;
}

1.3 main.c：C文件

[root@localhost CC++]#cat main.c
int main(void)

{       print();
        return 0;
}

1.4 Makefile

[root@localhost CC++]#cat Makefile
main:main.c animal.o
        gcc -lstdc++ main.c animal.o -o main

animal.o:animal.h
        g++ -c animal.cpp
.PHONY : clean
clean:
        -rm animal.o main

2.测试

2.1生成可执行程序main

[root@localhost CC++]#make
g++ -c animal.cpp
gcc -lstdc++ main.c animal.o -o main

2.2运行可执行程序main

[root@localhost CC++]# ./main
animal name is :dog

四、C++调用C函数

应该这个比较简单，我就不多写了，就直接写代码。
共有三个文件：1.h 1.c  main.cpp
[root@localhost aa]#cat 1.h
#ifndef _1__H_
#define _1__H_
extern void print(char* );
#endif

[root@localhost aa]#cat 1.c
#include <stdio.h>
#include "1.h"
void print(char* data)
{
        printf("%s\n",  data);
}
[root@localhost aa]#cat main.cpp

extern "C"{
#include "1.h"}
int main(void)
{
        print(“hello,world\n”);
        return 0;

}
gcc –c 1.c
g++ main.cpp 1.o

    接着./a.out，又可以出现我们神奇的hello,world了
